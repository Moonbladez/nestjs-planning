generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assignment {
  id      String    @id @default(nanoid())
  startTime DateTime @db.Timestamp(6)
  endTime   DateTime @db.Timestamp(6)
  orderId String?
  order   Order? @relation(fields: [orderId], references: [id])

  type   ASSIGNMENT_TYPE?
  status ASSIGNMENT_STATUS @default(UnderPlanning)

  fromProjectId String?
  fromProject   Project? @relation("FromProject", fields: [fromProjectId], references: [id])
  toProjectId   String?
  toProject     Project? @relation("ToProject", fields: [toProjectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String           @id @default(nanoid())
  status           ORDER_STATUS  @default(Created) @map("status")
  type             ORDER_TYPE
  earlyDelivery    Boolean       @map("early_delivery")
  date             DateTime      @db.Timestamp(6)
  vehicleType      VEHICLE_TYPE? @map("vehicle_type")
  numberOfVehicles Int?

  fromProjectId String?
  toProjectId   String?
  fromProject   Project? @relation("FromProject", fields: [fromProjectId], references: [id])
  toProject     Project? @relation("ToProject", fields: [toProjectId], references: [id])

  whenId String?
  when   When? @relation(fields: [whenId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Assignment Assignment[]
}

model Project {
  id         String     @id @default(nanoid( ))
  name       String
  region     Int?
  latitude   String?
  longitude  String?
  fromOrders Order[] @relation("FromProject")
  toOrders   Order[] @relation("ToProject")

  fromAssignments Assignment[] @relation("FromProject")
  toAssignments   Assignment[] @relation("ToProject")
  
}

model When {
  id     String      @id @default(nanoid())
  from   String?
  to     String?
  type   WHEN_TYPE
  orders Order[]
}

model Vehicle {
  internalNumber String  @id @default(nanoid())
  registration   String
  manufacturer   String?
  mainCategory   String?
  subCategory    String?
  modelYear      String?
  modelName     String?
  statusName   String?
  driver         Driver?  @relation(fields: [driverId], references: [id])
  driverId       String? @unique


  
}

model Driver {
  id  String    @id @default(nanoid())
  name String
  vehicle Vehicle? 
}

model Suggestion {
  id String @id @default(nanoid())
  status ASSIGNMENT_STATUS @default(Suggested)
  startTime DateTime @db.Timestamp(6)
  endTime   DateTime @db.Timestamp(6)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ASSIGNMENT_TYPE {
  MassIn
  MassOut
  MassInternal
  ContainerDeliver
  ContainerCollect
  ContainerEmptying
  ContainerSwap
}

enum ASSIGNMENT_STATUS {
  UnderPlanning
  Approved
  Started
  Completed
  NotDelivered
  Cancelled
  Deleted
  VerifiedNotDelivered
  Unavailable
  Suggested
  SuggestedAndApproved
}

enum VEHICLE_TYPE {
  Single
  Double
  Semi
  CarWithTrailer
  SixxSix
  HookLift
}

enum ORDER_STATUS {
  Created
  UnderPlanning
  Planned
  Cancelled
  Declined
}

enum ORDER_TYPE {
  MassIn
  MassOut
  MassInternal
  ContainerDeliver
  ContainerCollect
  ContainerEmptying
}

enum WHEN_TYPE {
  DuringTheDay
  Morning
  BeforeFood
  AfterFood
  Custom
}
